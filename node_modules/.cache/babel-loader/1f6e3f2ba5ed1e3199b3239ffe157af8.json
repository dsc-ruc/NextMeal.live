{"ast":null,"code":"var _jsxFileName = \"/Users/jlap/Coding/StudentDeveloperChallenge/NextMeal.live/src/components/ListView.js\";\nimport React, { Component } from 'react';\nimport { Card, Button } from 'react-bootstrap';\n\nfunction distance(lat1, lon1, lat2, lon2) {\n  var p = 0.017453292519943295;\n  var a = 0.5 - Math.cos((lat2 - lat1) * p) / 2 + Math.cos(lat1 * p) * Math.cos(lat2 * p) * (1 - Math.cos((lon2 - lon1) * p)) / 2;\n  return 12742 * Math.asin(Math.sqrt(a));\n} // Takes an array of objects with lat and lon properties as well as a single object with lat and lon\n// properties and finds the closest point (by shortest distance).\n\n\nfunction closest(data, v) {\n  // console.log(data.map(p => distance(v['lat'],v['lon'],p['lat'],p['lon'])))\n  // console.log(Math.min(...data.map(p => distance(v['lat'],v['lon'],p['lat'],p['lon']))))\n  var distances = data.map(function (p) {\n    console.log(p);\n    return {\n      lat: p.location.coordinates[0],\n      lon: p.location.coordinates[1],\n      organization: p.name_of_restaurant,\n      address: p.address,\n      distance: distance(v.currlat, v.currlon, p.location.coordinates[0], p.location.coordinates[1])\n    };\n  });\n  var minDistance = Math.min(...distances.map(d => d.distance));\n  var closestTap = {\n    organization: \"\",\n    address: \"\",\n    lat: \"\",\n    lon: \"\"\n  };\n\n  for (var i = 0; i < distances.length; i++) {\n    if (distances[i].distance === minDistance) {\n      closestTap.lat = distances[i].lat;\n      closestTap.lon = distances[i].lon;\n      closestTap.organization = distances[i].organization;\n      closestTap.address = distances[i].address;\n    }\n  }\n\n  return closestTap;\n}\n\nfunction getCoordinates() {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n}\n\nclass ListView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      currlat: 39.708262399999995,\n      // 39.9528,\n      currlon: -75.11408639999999,\n      //-75.1635,\n      taps: [],\n      tapsLoaded: false,\n      allLocations: null,\n      closestPoint: null\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:8000/api/donor/?format=json').then(res => {\n      this.setState({\n        allLocations: res.data\n      });\n    }).then(() => {\n      this.setState({\n        closestPoint: closest(this.state.allLocations, {\n          currlat: this.state.currlat,\n          currlon: this.state.currlon\n        })\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    getCoordinates().then(position => {\n      if (isNaN(position.coords.latitude) || isNaN(position.coords.longitude)) {\n        this.setState({\n          currlat: parseFloat(\"39.952744\")\n        });\n        this.setState({\n          currlon: parseFloat(\"-75.163500\")\n        });\n      } else {\n        this.setState({\n          currlat: position.coords.latitude\n        });\n        this.setState({\n          currlon: position.coords.longitude\n        });\n      }\n    });\n  }\n\n  renderCards() {\n    return this.state.allLocations.map(item => {\n      return React.createElement(Card, {\n        style: {\n          width: '18rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Card.Img, {\n        variant: \"top\",\n        src: \"holder.js/100px180\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(Card.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Card.Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Card Title\"), React.createElement(Card.Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Some quick example text to build on the card title and make up the bulk of the card's content.\"), React.createElement(Button, {\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Go somewhere\")));\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.renderCards());\n  }\n\n}\n\nexport default ListView;","map":{"version":3,"sources":["/Users/jlap/Coding/StudentDeveloperChallenge/NextMeal.live/src/components/ListView.js"],"names":["React","Component","Card","Button","distance","lat1","lon1","lat2","lon2","p","a","Math","cos","asin","sqrt","closest","data","v","distances","map","console","log","lat","location","coordinates","lon","organization","name_of_restaurant","address","currlat","currlon","minDistance","min","d","closestTap","i","length","getCoordinates","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","ListView","constructor","props","state","showingInfoWindow","activeMarker","selectedPlace","taps","tapsLoaded","allLocations","closestPoint","componentDidMount","axios","get","then","res","setState","catch","error","position","isNaN","coords","latitude","longitude","parseFloat","renderCards","item","width","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {Card, Button} from 'react-bootstrap';\n\nfunction distance(lat1, lon1, lat2, lon2) {\n    var p = 0.017453292519943295;\n    var a =\n      0.5 -\n      Math.cos((lat2 - lat1) * p) / 2 +\n      (Math.cos(lat1 * p) *\n        Math.cos(lat2 * p) *\n        (1 - Math.cos((lon2 - lon1) * p))) /\n        2;\n    return 12742 * Math.asin(Math.sqrt(a));\n  }\n  \n  // Takes an array of objects with lat and lon properties as well as a single object with lat and lon\n  // properties and finds the closest point (by shortest distance).\n  function closest(data, v) {\n    // console.log(data.map(p => distance(v['lat'],v['lon'],p['lat'],p['lon'])))\n    // console.log(Math.min(...data.map(p => distance(v['lat'],v['lon'],p['lat'],p['lon']))))\n    var distances = data.map(function(p) {\n      console.log(p);\n      return {\n        lat: p.location.coordinates[0],\n        lon: p.location.coordinates[1],\n        organization: p.name_of_restaurant,\n        address: p.address,\n  \n        distance: distance(v.currlat, v.currlon, p.location.coordinates[0], p.location.coordinates[1])\n      };\n    });\n    var minDistance = Math.min(...distances.map(d => d.distance));\n  \n    var closestTap = {\n      organization: \"\",\n      address: \"\",\n      lat: \"\",\n      lon: \"\"\n    };\n  \n    for (var i = 0; i < distances.length; i++) {\n      if (distances[i].distance === minDistance) {\n        closestTap.lat = distances[i].lat;\n        closestTap.lon = distances[i].lon;\n        closestTap.organization = distances[i].organization;\n        closestTap.address = distances[i].address;\n      }\n    }\n  \n    return closestTap;\n  }\n  \n    function getCoordinates() {\n      return new Promise(function(resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    }\n\n    \n\n\nclass ListView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {},\n            currlat: 39.708262399999995, // 39.9528,\n            currlon: -75.11408639999999, //-75.1635,\n            taps: [],\n            tapsLoaded: false,\n            allLocations: null,\n            closestPoint: null,\n         }\n        }\n\n        \n\n        componentDidMount() {\n            axios.get('http://localhost:8000/api/donor/?format=json')\n              .then(res => {\n                this.setState({ allLocations: res.data });\n              }).then(() => {\n                this.setState({closestPoint: closest(this.state.allLocations, {currlat: this.state.currlat, currlon: this.state.currlon})});\n              })\n              .catch((error) => {\n                console.log(error);\n              })\n        \n              getCoordinates().then(position => {\n                if (isNaN(position.coords.latitude) || isNaN(position.coords.longitude)) {\n                  this.setState({ currlat: parseFloat(\"39.952744\") });\n                  this.setState({ currlon: parseFloat(\"-75.163500\") });\n                } else {\n                  this.setState({ currlat: position.coords.latitude });\n                  this.setState({ currlon: position.coords.longitude });\n                }\n              });\n        \n          }\n\n        renderCards(){\n            return this.state.allLocations.map(item => {\n                return (\n                    <Card style={{ width: '18rem' }}>\n                        <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n                        <Card.Body>\n                            <Card.Title>Card Title</Card.Title>\n                            <Card.Text>\n                            Some quick example text to build on the card title and make up the bulk of\n                            the card's content.\n                            </Card.Text>\n                            <Button variant=\"primary\">Go somewhere</Button>\n                        </Card.Body>\n                    </Card>\n                );\n            })\n        };\n\n    render() { \n        return ( \n            <div>\n            {this.renderCards()}\n            </div>\n         );\n    }\n}\n \nexport default ListView;"]},"metadata":{},"sourceType":"module"}