{"ast":null,"code":"var _jsxFileName = \"/Users/jlap/Coding/ProfHacks2020/ProfHacks2020/src/components/GoogleMap.js\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport React, { Component } from \"react\";\nimport ResturantMarker from '../images/resturantMarker.png';\nconst style = {\n  width: \"100%\",\n  height: \"81%\",\n  position: \"relative\"\n};\nexport class GoogleMap extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.onMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      currlat: 39.708262399999995,\n      // 39.9528,\n      currlon: -75.11408639999999,\n      //-75.1635,\n      taps: [],\n      tapsLoaded: false\n    };\n  }\n\n  fetchPlaces(mapProps, map) {\n    const {\n      google\n    } = mapProps;\n    const service = new google.maps.places.PlacesService(map);\n  }\n\n  render() {\n    return React.createElement(Map, {\n      google: this.props.google,\n      className: \"map\",\n      style: style,\n      zoom: 16,\n      initialCenter: {\n        lat: this.state.currlat,\n        lng: this.state.currlon\n      },\n      center: {\n        lat: this.state.currlat,\n        lng: this.state.currlon\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      icon: {\n        url: ResturantMarker,\n        anchor: new google.maps.Point(32, 32),\n        scaledSize: new google.maps.Size(64, 64)\n      },\n      onClick: this.onMarkerClick,\n      name: 'Current location',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      onClose: this.onInfoWindowClose,\n      visible: this.state.showingInfoWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.state.selectedPlace.name))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBIQpZBgN7WPGuBCRsCXQBfZJvetJxurFg\"\n})(GoogleMap);","map":{"version":3,"sources":["/Users/jlap/Coding/ProfHacks2020/ProfHacks2020/src/components/GoogleMap.js"],"names":["Map","InfoWindow","Marker","GoogleApiWrapper","React","Component","ResturantMarker","style","width","height","position","GoogleMap","constructor","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","onMapClicked","currlat","currlon","taps","tapsLoaded","fetchPlaces","mapProps","map","google","service","maps","places","PlacesService","render","lat","lng","url","anchor","Point","scaledSize","Size","onInfoWindowClose","name","apiKey"],"mappings":";AAAA,SAAQA,GAAR,EAAaC,UAAb,EAAyBC,MAAzB,EAAiCC,gBAAjC,QAAwD,mBAAxD;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE,MADG;AAEVC,EAAAA,MAAM,EAAE,KAFE;AAGVC,EAAAA,QAAQ,EAAE;AAHA,CAAd;AAMA,OAAO,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AACrCO,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACf,UAAMA,MAAN;;AADe,SAcjBC,aAdiB,GAcD,CAACD,KAAD,EAAQE,MAAR,EAAgBC,CAAhB,KAClB,KAAKC,QAAL,CAAc;AACZC,MAAAA,aAAa,EAAEL,KADH;AAEZM,MAAAA,YAAY,EAAEJ,MAFF;AAGZK,MAAAA,iBAAiB,EAAE;AAHP,KAAd,CAfmB;;AAAA,SAqBrBC,OArBqB,GAqBXR,KAAK,IAAI;AACjB,UAAI,KAAKS,KAAL,CAAWF,iBAAf,EAAkC;AAChC,aAAKH,QAAL,CAAc;AACZG,UAAAA,iBAAiB,EAAE,KADP;AAEZD,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID;AACF,KA5BoB;;AAAA,SA8BrBI,YA9BqB,GA8BNV,KAAK,IAAI;AACtB,UAAI,KAAKS,KAAL,CAAWF,iBAAf,EAAkC;AAChC,aAAKH,QAAL,CAAc;AACZG,UAAAA,iBAAiB,EAAE,KADP;AAEZD,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID;AACF,KArCoB;;AAGf,SAAKG,KAAL,GAAa;AACXF,MAAAA,iBAAiB,EAAE,KADR;AAEXD,MAAAA,YAAY,EAAE,EAFH;AAGXD,MAAAA,aAAa,EAAE,EAHJ;AAIXM,MAAAA,OAAO,EAAE,kBAJE;AAIkB;AAC7BC,MAAAA,OAAO,EAAE,CAAC,iBALC;AAKkB;AAC7BC,MAAAA,IAAI,EAAE,EANK;AAOXC,MAAAA,UAAU,EAAE;AAPD,KAAb;AASD;;AA0BLC,EAAAA,WAAW,CAACC,QAAD,EAAWC,GAAX,EAAgB;AACzB,UAAM;AAACC,MAAAA;AAAD,QAAWF,QAAjB;AACA,UAAMG,OAAO,GAAG,IAAID,MAAM,CAACE,IAAP,CAAYC,MAAZ,CAAmBC,aAAvB,CAAqCL,GAArC,CAAhB;AACD;;AAECM,EAAAA,MAAM,GAAG;AACL,WACA,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAE,KAAKvB,KAAL,CAAWkB,MAAxB;AACI,MAAA,SAAS,EAAE,KADf;AAEI,MAAA,KAAK,EAAExB,KAFX;AAGI,MAAA,IAAI,EAAE,EAHV;AAII,MAAA,aAAa,EAAE;AACf8B,QAAAA,GAAG,EAAE,KAAKf,KAAL,CAAWE,OADD;AAEfc,QAAAA,GAAG,EAAE,KAAKhB,KAAL,CAAWG;AAFD,OAJnB;AAQI,MAAA,MAAM,EAAE;AAAEY,QAAAA,GAAG,EAAE,KAAKf,KAAL,CAAWE,OAAlB;AAA2Bc,QAAAA,GAAG,EAAE,KAAKhB,KAAL,CAAWG;AAA3C,OARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWI,oBAAC,MAAD;AACM,MAAA,IAAI,EAAE;AACJc,QAAAA,GAAG,EAAEjC,eADD;AAEJkC,QAAAA,MAAM,EAAE,IAAIT,MAAM,CAACE,IAAP,CAAYQ,KAAhB,CAAsB,EAAtB,EAAyB,EAAzB,CAFJ;AAGJC,QAAAA,UAAU,EAAE,IAAIX,MAAM,CAACE,IAAP,CAAYU,IAAhB,CAAqB,EAArB,EAAwB,EAAxB;AAHR,OADZ;AAMM,MAAA,OAAO,EAAE,KAAK7B,aANpB;AAOQ,MAAA,IAAI,EAAE,kBAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXJ,EAoBI,oBAAC,UAAD;AACI,MAAA,MAAM,EAAE,KAAKQ,KAAL,CAAWH,YADvB;AAEI,MAAA,OAAO,EAAE,KAAKyB,iBAFlB;AAGI,MAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWF,iBAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKE,KAAL,CAAWJ,aAAX,CAAyB2B,IAA9B,CADA,CAJJ,CApBJ,CADA;AA+BH;;AA5EoC;AA+EzC,eAAe1C,gBAAgB,CAAC;AAC9B2C,EAAAA,MAAM,EAAG;AADqB,CAAD,CAAhB,CAEZnC,SAFY,CAAf","sourcesContent":["import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport React, { Component } from \"react\";\nimport ResturantMarker from '../images/resturantMarker.png';\n \nconst style = {\n    width: \"100%\",\n    height: \"81%\",\n    position: \"relative\"\n  };\n  \nexport class GoogleMap extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          showingInfoWindow: false,\n          activeMarker: {},\n          selectedPlace: {},\n          currlat: 39.708262399999995, // 39.9528,\n          currlon: -75.11408639999999, //-75.1635,\n          taps: [],\n          tapsLoaded: false,\n        };\n      }\n\n      onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  onMapClicked = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n  fetchPlaces(mapProps, map) {\n    const {google} = mapProps;\n    const service = new google.maps.places.PlacesService(map);\n  }\n\n    render() {\n        return (\n        <Map google={this.props.google}\n            className={\"map\"}\n            style={style}\n            zoom={16}\n            initialCenter={{\n            lat: this.state.currlat,\n            lng: this.state.currlon\n            }}\n            center={{ lat: this.state.currlat, lng: this.state.currlon }}\n        >\n    \n            <Marker\n                  icon={{\n                    url: ResturantMarker,\n                    anchor: new google.maps.Point(32,32),\n                    scaledSize: new google.maps.Size(64,64)\n                  }}\n                  onClick={this.onMarkerClick}\n                    name={'Current location'} />\n    \n            <InfoWindow \n                marker={this.state.activeMarker}\n                onClose={this.onInfoWindowClose}\n                visible={this.state.showingInfoWindow}>\n                <div>\n                <h1>{this.state.selectedPlace.name}</h1>\n                </div>\n            </InfoWindow>\n        </Map>\n        );\n    }\n    }\n \nexport default GoogleApiWrapper({\n  apiKey: (\"AIzaSyBIQpZBgN7WPGuBCRsCXQBfZJvetJxurFg\")\n})(GoogleMap)"]},"metadata":{},"sourceType":"module"}