{"ast":null,"code":"var _jsxFileName = \"/Users/jlap/Coding/ProfHacks2020/ProfHacks2020/src/components/GoogleMap.js\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ResturantMarker from '../images/resturantMarker.png';\nconst style = {\n  width: \"100%\",\n  height: \"90vh\",\n  position: \"relative\"\n};\n\nfunction getCoordinates() {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n}\n\nexport class GoogleMap extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.onMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      currlat: 39.708262399999995,\n      // 39.9528,\n      currlon: -75.11408639999999,\n      //-75.1635,\n      taps: [],\n      tapsLoaded: false,\n      allLocations: null\n    };\n  }\n\n  renderMarkers() {\n    return this.state.allLocations.map(item => {\n      return React.createElement(Marker, {\n        icon: {\n          url: ResturantMarker,\n          anchor: new this.props.google.maps.Point(32, 32),\n          scaledSize: new this.props.google.maps.Size(64, 64)\n        },\n        onClick: this.onMarkerClick,\n        name: item.name_of_restaurant,\n        address: item.address,\n        sTime: item.food_available_start_time,\n        eTime: item.food_available_end_time,\n        foodAvail: item.food_available,\n        allergies: item.potential_allergies,\n        position: {\n          lat: item.location.coordinates[0],\n          lng: item.location.coordinates[1]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    });\n  }\n\n  componentDidMount() {\n    axios.get('https://35.245.117.252:5000').then(res => {\n      this.setState({\n        allLocations: res.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    getCoordinates().then(position => {\n      if (isNaN(position.coords.latitude) || isNaN(position.coords.longitude)) {\n        this.setState({\n          currlat: parseFloat(\"39.952744\")\n        });\n        this.setState({\n          currlon: parseFloat(\"-75.163500\")\n        });\n      } else {\n        this.setState({\n          currlat: position.coords.latitude\n        });\n        this.setState({\n          currlon: position.coords.longitude\n        });\n      }\n    });\n  }\n\n  render() {\n    console.log(this.state.allLocations);\n    return React.createElement(Map, {\n      google: this.props.google,\n      className: \"map\",\n      id: \"map\",\n      style: style,\n      zoom: 14,\n      initialCenter: {\n        lat: this.state.currlat,\n        lng: this.state.currlon\n      },\n      center: {\n        lat: this.state.currlat,\n        lng: this.state.currlon\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'Current location',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      onClose: this.onInfoWindowClose,\n      visible: this.state.showingInfoWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, this.state.selectedPlace.name)))), this.state.allLocations && this.renderMarkers(), React.createElement(Marker, {\n      icon: {\n        url: ResturantMarker,\n        anchor: new this.props.google.maps.Point(32, 32),\n        scaledSize: new this.props.google.maps.Size(64, 64)\n      },\n      onClick: this.onMarkerClick,\n      name: 'Holder Marker',\n      address: \"Location\",\n      sTime: \"Start Time\",\n      eTime: \"End Time\",\n      foodAvail: \"Food Avalible\",\n      allergies: \"Allergies\",\n      position: {\n        lat: 39.709262,\n        lng: -75.1240\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      onClose: this.onInfoWindowClose,\n      visible: this.state.showingInfoWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, this.state.selectedPlace.name), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Adress: \" + this.state.selectedPlace.address), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Open Time: \" + this.state.selectedPlace.sTime), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Close Time: \" + this.state.selectedPlace.eTime), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Food Available: \" + this.state.selectedPlace.foodAvail), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Allergies\" + this.state.selectedPlace.allergies))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBIQpZBgN7WPGuBCRsCXQBfZJvetJxurFg\"\n})(GoogleMap);","map":{"version":3,"sources":["/Users/jlap/Coding/ProfHacks2020/ProfHacks2020/src/components/GoogleMap.js"],"names":["Map","InfoWindow","Marker","GoogleApiWrapper","React","Component","axios","ResturantMarker","style","width","height","position","getCoordinates","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","GoogleMap","constructor","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","onMapClicked","currlat","currlon","taps","tapsLoaded","allLocations","renderMarkers","map","item","url","anchor","google","maps","Point","scaledSize","Size","name_of_restaurant","address","food_available_start_time","food_available_end_time","food_available","potential_allergies","lat","location","coordinates","lng","componentDidMount","get","then","res","data","catch","error","console","log","isNaN","coords","latitude","longitude","parseFloat","render","onInfoWindowClose","name","sTime","eTime","foodAvail","allergies","apiKey"],"mappings":"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","sourcesContent":["import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ResturantMarker from '../images/resturantMarker.png';\n\nconst style = {\n    width: \"100%\",\n    height: \"90vh\",\n    position: \"relative\",\n  };\n\n  function getCoordinates() {\n    return new Promise(function(resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n  }\n\nexport class GoogleMap extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n          showingInfoWindow: false,\n          activeMarker: {},\n          selectedPlace: {},\n          currlat: 39.708262399999995, // 39.9528,\n          currlon: -75.11408639999999, //-75.1635,\n          taps: [],\n          tapsLoaded: false,\n          allLocations: null,\n        };\n      }\n\n      onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  onMapClicked = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  renderMarkers() {\n    return this.state.allLocations.map(item => {\n      return (\n        <Marker\n              icon={{\n                url: ResturantMarker,\n                anchor: new this.props.google.maps.Point(32,32),\n                scaledSize: new this.props.google.maps.Size(64,64)\n              }}\n              onClick={this.onMarkerClick}\n              name={item.name_of_restaurant}\n              address = {item.address}\n              sTime = {item.food_available_start_time}\n              eTime = {item.food_available_end_time}\n              foodAvail = {item.food_available}\n              allergies = {item.potential_allergies}\n              position={{lat: item.location.coordinates[0], lng: item.location.coordinates[1]}}/>\n      )\n    })\n  }\n\n  componentDidMount() {\n    axios.get('https://35.245.117.252:5000')\n      .then(res => {\n        this.setState({ allLocations: res.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n\n      getCoordinates().then(position => {\n        if (isNaN(position.coords.latitude) || isNaN(position.coords.longitude)) {\n          this.setState({ currlat: parseFloat(\"39.952744\") });\n          this.setState({ currlon: parseFloat(\"-75.163500\") });\n        } else {\n          this.setState({ currlat: position.coords.latitude });\n          this.setState({ currlon: position.coords.longitude });\n        }\n      });\n  }\n\n    render() {\n        console.log(this.state.allLocations);\n        return (\n        <Map google={this.props.google}\n            className={\"map\"}\n            id=\"map\"\n            style={style}\n            zoom={14}\n            initialCenter={{\n            lat: this.state.currlat,\n            lng: this.state.currlon\n            }}\n            center={{ lat: this.state.currlat, lng: this.state.currlon }}\n        >\n            <Marker\n            onClick={this.onMarkerClick}\n            name={'Current location'} >\n              <InfoWindow\n                marker={this.state.activeMarker}\n                onClose={this.onInfoWindowClose}\n                visible={this.state.showingInfoWindow}>\n                <div>\n                <h1>{this.state.selectedPlace.name}</h1>\n                </div>\n            </InfoWindow>\n            </Marker>\n            \n            {this.state.allLocations && this.renderMarkers()}\n            <Marker\n                  icon={{\n                    url: ResturantMarker,\n                    anchor: new this.props.google.maps.Point(32,32),\n                    scaledSize: new this.props.google.maps.Size(64,64)\n                  }}\n                  onClick={this.onMarkerClick}\n                  name={'Holder Marker'}\n                  address = {\"Location\"}\n                  sTime = {\"Start Time\"}\n                  eTime = {\"End Time\"}\n                  foodAvail = {\"Food Avalible\"}\n                  allergies = {\"Allergies\"}\n                  position={{lat: 39.709262, lng: -75.1240}}/>\n\n\n            <InfoWindow\n                marker={this.state.activeMarker}\n                onClose={this.onInfoWindowClose}\n                visible={this.state.showingInfoWindow}>\n                <div>\n                <h3>{this.state.selectedPlace.name}</h3>\n                <h5>{\"Adress: \" + this.state.selectedPlace.address}</h5>\n                <h5>{\"Open Time: \" + this.state.selectedPlace.sTime}</h5>\n                <h5>{\"Close Time: \" + this.state.selectedPlace.eTime}</h5>\n                <h5>{\"Food Available: \" + this.state.selectedPlace.foodAvail}</h5>\n                <h5>{\"Allergies\" + this.state.selectedPlace.allergies}</h5>\n                </div>\n            </InfoWindow>\n        </Map>\n        );\n    }\n    }\n\nexport default GoogleApiWrapper({\n  apiKey: (\"AIzaSyBIQpZBgN7WPGuBCRsCXQBfZJvetJxurFg\")\n})(GoogleMap)\n"]},"metadata":{},"sourceType":"module"}