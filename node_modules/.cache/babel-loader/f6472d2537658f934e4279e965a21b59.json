{"ast":null,"code":"var _jsxFileName = \"/Users/jlap/Coding/ProfHacks2020/ProfHacks2020/src/components/GoogleMap.js\";\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ResturantMarker from '../images/resturantMarker.png';\nimport { Card } from 'react-bootstrap';\nconst style = {\n  width: \"100%\",\n  height: \"90vh\",\n  position: \"relative\"\n}; // Actual Magic: https://stackoverflow.com/a/41337005\n// Distance calculates the distance between two lat/lon pairs\n\nfunction distance(lat1, lon1, lat2, lon2) {\n  var p = 0.017453292519943295;\n  var a = 0.5 - Math.cos((lat2 - lat1) * p) / 2 + Math.cos(lat1 * p) * Math.cos(lat2 * p) * (1 - Math.cos((lon2 - lon1) * p)) / 2;\n  return 12742 * Math.asin(Math.sqrt(a));\n} // Takes an array of objects with lat and lon properties as well as a single object with lat and lon\n// properties and finds the closest point (by shortest distance).\n\n\nfunction closest(data, v) {\n  // console.log(data.map(p => distance(v['lat'],v['lon'],p['lat'],p['lon'])))\n  // console.log(Math.min(...data.map(p => distance(v['lat'],v['lon'],p['lat'],p['lon']))))\n  var distances = data.map(function (p) {\n    return {\n      lat: p[\"lat\"],\n      lon: p[\"lon\"],\n      organization: p[\"organization\"],\n      address: p[\"address\"],\n      distance: distance(v[\"lat\"], v[\"lon\"], p[\"lat\"], p[\"lon\"])\n    };\n  });\n  var minDistance = Math.min(...distances.map(d => d.distance));\n  var closestTap = {\n    organization: \"\",\n    address: \"\",\n    lat: \"\",\n    lon: \"\"\n  };\n\n  for (var i = 0; i < distances.length; i++) {\n    if (distances[i].distance === minDistance) {\n      closestTap.lat = distances[i].lat;\n      closestTap.lon = distances[i].lon;\n      closestTap.organization = distances[i].organization;\n      closestTap.address = distances[i].address;\n    }\n  }\n\n  return closestTap;\n}\n\nfunction getCoordinates() {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject);\n  });\n}\n\nexport class GoogleMap extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.onMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      currlat: 39.708262399999995,\n      // 39.9528,\n      currlon: -75.11408639999999,\n      //-75.1635,\n      taps: [],\n      tapsLoaded: false,\n      allLocations: null,\n      closestPoint: null\n    };\n  }\n\n  renderMarkers() {\n    return this.state.allLocations.map(item => {\n      return React.createElement(Marker, {\n        icon: {\n          url: ResturantMarker,\n          anchor: new this.props.google.maps.Point(32, 32),\n          scaledSize: new this.props.google.maps.Size(64, 64)\n        },\n        onClick: this.onMarkerClick,\n        name: item.name_of_restaurant,\n        address: item.address,\n        sTime: item.food_available_start_time,\n        eTime: item.food_available_end_time,\n        foodAvail: item.food_available,\n        allergies: item.potential_allergies,\n        position: {\n          lat: item.location.coordinates[0],\n          lng: item.location.coordinates[1]\n        },\n        qPos: item.location.coordinates[0] + \",\" + item.location.coordinates[1],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n    });\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/donors').then(res => {\n      this.setState({\n        allLocations: res.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n    getCoordinates().then(position => {\n      if (isNaN(position.coords.latitude) || isNaN(position.coords.longitude)) {\n        this.setState({\n          currlat: parseFloat(\"39.952744\")\n        });\n        this.setState({\n          currlon: parseFloat(\"-75.163500\")\n        });\n      } else {\n        this.setState({\n          currlat: position.coords.latitude\n        });\n        this.setState({\n          currlon: position.coords.longitude\n        });\n      }\n    });\n    this.setState({\n      closestTap: closest(this.state.allLocations, getCoordinates())\n    });\n  }\n\n  render() {\n    console.log(this.state.allLocations);\n    return React.createElement(React.Fragment, null, React.createElement(Map, {\n      google: this.props.google,\n      className: \"map\",\n      id: \"map\",\n      style: style,\n      zoom: 14,\n      initialCenter: {\n        lat: this.state.currlat,\n        lng: this.state.currlon\n      },\n      center: {\n        lat: this.state.currlat,\n        lng: this.state.currlon\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      onClick: this.onMarkerClick,\n      name: 'Current location',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      onClose: this.onInfoWindowClose,\n      visible: this.state.showingInfoWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, this.state.selectedPlace.name)))), this.state.allLocations && this.renderMarkers(), React.createElement(Marker, {\n      icon: {\n        url: ResturantMarker,\n        anchor: new this.props.google.maps.Point(32, 32),\n        scaledSize: new this.props.google.maps.Size(64, 64)\n      },\n      onClick: this.onMarkerClick,\n      name: 'Holder Marker',\n      address: \"Location\",\n      sTime: \"Start Time\",\n      eTime: \"End Time\",\n      foodAvail: \"Food Avalible\",\n      allergies: \"Allergies\",\n      position: {\n        lat: 39.709262,\n        lng: -75.1240\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      onClose: this.onInfoWindowClose,\n      visible: this.state.showingInfoWindow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, this.state.selectedPlace.name), React.createElement(\"a\", {\n      href: \"https://www.google.com/maps/search/?api=1&query=\" + this.state.selectedPlace.qPos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Address: \" + this.state.selectedPlace.address)), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Open Time: \" + this.state.selectedPlace.sTime), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Close Time: \" + this.state.selectedPlace.eTime), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Food Available: \" + this.state.selectedPlace.foodAvail), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Allergies: \" + this.state.selectedPlace.allergies)))), React.createElement(Card, {\n      style: {\n        width: '18rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, \"Closest Resturant\"), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, this.state.closestTap))));\n  }\n\n}\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyBIQpZBgN7WPGuBCRsCXQBfZJvetJxurFg\"\n})(GoogleMap);","map":{"version":3,"sources":["/Users/jlap/Coding/ProfHacks2020/ProfHacks2020/src/components/GoogleMap.js"],"names":["Map","InfoWindow","Marker","GoogleApiWrapper","React","Component","axios","ResturantMarker","Card","style","width","height","position","distance","lat1","lon1","lat2","lon2","p","a","Math","cos","asin","sqrt","closest","data","v","distances","map","lat","lon","organization","address","minDistance","min","d","closestTap","i","length","getCoordinates","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","GoogleMap","constructor","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","onMapClicked","currlat","currlon","taps","tapsLoaded","allLocations","closestPoint","renderMarkers","item","url","anchor","google","maps","Point","scaledSize","Size","name_of_restaurant","food_available_start_time","food_available_end_time","food_available","potential_allergies","location","coordinates","lng","componentDidMount","get","then","res","catch","error","console","log","isNaN","coords","latitude","longitude","parseFloat","render","onInfoWindowClose","name","qPos","sTime","eTime","foodAvail","allergies","apiKey"],"mappings":";AAAA,SAAQA,GAAR,EAAaC,UAAb,EAAyBC,MAAzB,EAAiCC,gBAAjC,QAAwD,mBAAxD;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,SAAQC,IAAR,QAAmB,iBAAnB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,KAAK,EAAE,MADG;AAEVC,EAAAA,MAAM,EAAE,MAFE;AAGVC,EAAAA,QAAQ,EAAE;AAHA,CAAd,C,CAME;AACF;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AACxC,MAAIC,CAAC,GAAG,oBAAR;AACA,MAAIC,CAAC,GACH,MACAC,IAAI,CAACC,GAAL,CAAS,CAACL,IAAI,GAAGF,IAAR,IAAgBI,CAAzB,IAA8B,CAD9B,GAECE,IAAI,CAACC,GAAL,CAASP,IAAI,GAAGI,CAAhB,IACCE,IAAI,CAACC,GAAL,CAASL,IAAI,GAAGE,CAAhB,CADD,IAEE,IAAIE,IAAI,CAACC,GAAL,CAAS,CAACJ,IAAI,GAAGF,IAAR,IAAgBG,CAAzB,CAFN,CAAD,GAGE,CANJ;AAOA,SAAO,QAAQE,IAAI,CAACE,IAAL,CAAUF,IAAI,CAACG,IAAL,CAAUJ,CAAV,CAAV,CAAf;AACD,C,CAED;AACA;;;AACA,SAASK,OAAT,CAAiBC,IAAjB,EAAuBC,CAAvB,EAA0B;AACxB;AACA;AACA,MAAIC,SAAS,GAAGF,IAAI,CAACG,GAAL,CAAS,UAASV,CAAT,EAAY;AACnC,WAAO;AACLW,MAAAA,GAAG,EAAEX,CAAC,CAAC,KAAD,CADD;AAELY,MAAAA,GAAG,EAAEZ,CAAC,CAAC,KAAD,CAFD;AAGLa,MAAAA,YAAY,EAAEb,CAAC,CAAC,cAAD,CAHV;AAILc,MAAAA,OAAO,EAAEd,CAAC,CAAC,SAAD,CAJL;AAKLL,MAAAA,QAAQ,EAAEA,QAAQ,CAACa,CAAC,CAAC,KAAD,CAAF,EAAWA,CAAC,CAAC,KAAD,CAAZ,EAAqBR,CAAC,CAAC,KAAD,CAAtB,EAA+BA,CAAC,CAAC,KAAD,CAAhC;AALb,KAAP;AAOD,GARe,CAAhB;AASA,MAAIe,WAAW,GAAGb,IAAI,CAACc,GAAL,CAAS,GAAGP,SAAS,CAACC,GAAV,CAAcO,CAAC,IAAIA,CAAC,CAACtB,QAArB,CAAZ,CAAlB;AAEA,MAAIuB,UAAU,GAAG;AACfL,IAAAA,YAAY,EAAE,EADC;AAEfC,IAAAA,OAAO,EAAE,EAFM;AAGfH,IAAAA,GAAG,EAAE,EAHU;AAIfC,IAAAA,GAAG,EAAE;AAJU,GAAjB;;AAOA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,SAAS,CAACW,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,QAAIV,SAAS,CAACU,CAAD,CAAT,CAAaxB,QAAb,KAA0BoB,WAA9B,EAA2C;AACzCG,MAAAA,UAAU,CAACP,GAAX,GAAiBF,SAAS,CAACU,CAAD,CAAT,CAAaR,GAA9B;AACAO,MAAAA,UAAU,CAACN,GAAX,GAAiBH,SAAS,CAACU,CAAD,CAAT,CAAaP,GAA9B;AACAM,MAAAA,UAAU,CAACL,YAAX,GAA0BJ,SAAS,CAACU,CAAD,CAAT,CAAaN,YAAvC;AACAK,MAAAA,UAAU,CAACJ,OAAX,GAAqBL,SAAS,CAACU,CAAD,CAAT,CAAaL,OAAlC;AACD;AACF;;AAED,SAAOI,UAAP;AACD;;AAEC,SAASG,cAAT,GAA0B;AACxB,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3CC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCJ,OAAzC,EAAkDC,MAAlD;AACD,GAFM,CAAP;AAGD;;AAEH,OAAO,MAAMI,SAAN,SAAwBzC,SAAxB,CAAkC;AACrC0C,EAAAA,WAAW,CAACC,MAAD,EAAQ;AACf,UAAMA,MAAN;;AADe,SAgBjBC,aAhBiB,GAgBD,CAACD,KAAD,EAAQE,MAAR,EAAgBC,CAAhB,KAClB,KAAKC,QAAL,CAAc;AACZC,MAAAA,aAAa,EAAEL,KADH;AAEZM,MAAAA,YAAY,EAAEJ,MAFF;AAGZK,MAAAA,iBAAiB,EAAE;AAHP,KAAd,CAjBmB;;AAAA,SAuBrBC,OAvBqB,GAuBXR,KAAK,IAAI;AACjB,UAAI,KAAKS,KAAL,CAAWF,iBAAf,EAAkC;AAChC,aAAKH,QAAL,CAAc;AACZG,UAAAA,iBAAiB,EAAE,KADP;AAEZD,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID;AACF,KA9BoB;;AAAA,SAgCrBI,YAhCqB,GAgCNV,KAAK,IAAI;AACtB,UAAI,KAAKS,KAAL,CAAWF,iBAAf,EAAkC;AAChC,aAAKH,QAAL,CAAc;AACZG,UAAAA,iBAAiB,EAAE,KADP;AAEZD,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID;AACF,KAvCoB;;AAGf,SAAKG,KAAL,GAAa;AACXF,MAAAA,iBAAiB,EAAE,KADR;AAEXD,MAAAA,YAAY,EAAE,EAFH;AAGXD,MAAAA,aAAa,EAAE,EAHJ;AAIXM,MAAAA,OAAO,EAAE,kBAJE;AAIkB;AAC7BC,MAAAA,OAAO,EAAE,CAAC,iBALC;AAKkB;AAC7BC,MAAAA,IAAI,EAAE,EANK;AAOXC,MAAAA,UAAU,EAAE,KAPD;AAQXC,MAAAA,YAAY,EAAE,IARH;AASXC,MAAAA,YAAY,EAAE;AATH,KAAb;AAWD;;AA2BLC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKR,KAAL,CAAWM,YAAX,CAAwBnC,GAAxB,CAA4BsC,IAAI,IAAI;AACzC,aACE,oBAAC,MAAD;AACM,QAAA,IAAI,EAAE;AACJC,UAAAA,GAAG,EAAE5D,eADD;AAEJ6D,UAAAA,MAAM,EAAE,IAAI,KAAKpB,KAAL,CAAWqB,MAAX,CAAkBC,IAAlB,CAAuBC,KAA3B,CAAiC,EAAjC,EAAoC,EAApC,CAFJ;AAGJC,UAAAA,UAAU,EAAE,IAAI,KAAKxB,KAAL,CAAWqB,MAAX,CAAkBC,IAAlB,CAAuBG,IAA3B,CAAgC,EAAhC,EAAmC,EAAnC;AAHR,SADZ;AAMM,QAAA,OAAO,EAAE,KAAKxB,aANpB;AAOM,QAAA,IAAI,EAAEiB,IAAI,CAACQ,kBAPjB;AAQM,QAAA,OAAO,EAAIR,IAAI,CAAClC,OARtB;AASM,QAAA,KAAK,EAAIkC,IAAI,CAACS,yBATpB;AAUM,QAAA,KAAK,EAAIT,IAAI,CAACU,uBAVpB;AAWM,QAAA,SAAS,EAAIV,IAAI,CAACW,cAXxB;AAYM,QAAA,SAAS,EAAIX,IAAI,CAACY,mBAZxB;AAaM,QAAA,QAAQ,EAAE;AAACjD,UAAAA,GAAG,EAAEqC,IAAI,CAACa,QAAL,CAAcC,WAAd,CAA0B,CAA1B,CAAN;AAAoCC,UAAAA,GAAG,EAAEf,IAAI,CAACa,QAAL,CAAcC,WAAd,CAA0B,CAA1B;AAAzC,SAbhB;AAcM,QAAA,IAAI,EAAId,IAAI,CAACa,QAAL,CAAcC,WAAd,CAA0B,CAA1B,IAA+B,GAA/B,GAAqCd,IAAI,CAACa,QAAL,CAAcC,WAAd,CAA0B,CAA1B,CAdnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAkBD,KAnBM,CAAP;AAoBD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB5E,IAAAA,KAAK,CAAC6E,GAAN,CAAU,8BAAV,EACGC,IADH,CACQC,GAAG,IAAI;AACX,WAAKjC,QAAL,CAAc;AAAEW,QAAAA,YAAY,EAAEsB,GAAG,CAAC5D;AAApB,OAAd;AACD,KAHH,EAIG6D,KAJH,CAIUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KANH;AAQEhD,IAAAA,cAAc,GAAG6C,IAAjB,CAAsBxE,QAAQ,IAAI;AAChC,UAAI8E,KAAK,CAAC9E,QAAQ,CAAC+E,MAAT,CAAgBC,QAAjB,CAAL,IAAmCF,KAAK,CAAC9E,QAAQ,CAAC+E,MAAT,CAAgBE,SAAjB,CAA5C,EAAyE;AACvE,aAAKzC,QAAL,CAAc;AAAEO,UAAAA,OAAO,EAAEmC,UAAU,CAAC,WAAD;AAArB,SAAd;AACA,aAAK1C,QAAL,CAAc;AAAEQ,UAAAA,OAAO,EAAEkC,UAAU,CAAC,YAAD;AAArB,SAAd;AACD,OAHD,MAGO;AACL,aAAK1C,QAAL,CAAc;AAAEO,UAAAA,OAAO,EAAE/C,QAAQ,CAAC+E,MAAT,CAAgBC;AAA3B,SAAd;AACA,aAAKxC,QAAL,CAAc;AAAEQ,UAAAA,OAAO,EAAEhD,QAAQ,CAAC+E,MAAT,CAAgBE;AAA3B,SAAd;AACD;AACF,KARD;AASA,SAAKzC,QAAL,CAAc;AAAChB,MAAAA,UAAU,EAAEZ,OAAO,CAAC,KAAKiC,KAAL,CAAWM,YAAZ,EAA0BxB,cAAc,EAAxC;AAApB,KAAd;AACH;;AAECwD,EAAAA,MAAM,GAAG;AACLP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhC,KAAL,CAAWM,YAAvB;AACA,WACE,0CACF,oBAAC,GAAD;AAAK,MAAA,MAAM,EAAE,KAAKf,KAAL,CAAWqB,MAAxB;AACI,MAAA,SAAS,EAAE,KADf;AAEI,MAAA,EAAE,EAAC,KAFP;AAGI,MAAA,KAAK,EAAE5D,KAHX;AAII,MAAA,IAAI,EAAE,EAJV;AAKI,MAAA,aAAa,EAAE;AACfoB,QAAAA,GAAG,EAAE,KAAK4B,KAAL,CAAWE,OADD;AAEfsB,QAAAA,GAAG,EAAE,KAAKxB,KAAL,CAAWG;AAFD,OALnB;AASI,MAAA,MAAM,EAAE;AAAE/B,QAAAA,GAAG,EAAE,KAAK4B,KAAL,CAAWE,OAAlB;AAA2BsB,QAAAA,GAAG,EAAE,KAAKxB,KAAL,CAAWG;AAA3C,OATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWI,oBAAC,MAAD;AACA,MAAA,OAAO,EAAE,KAAKX,aADd;AAEA,MAAA,IAAI,EAAE,kBAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,oBAAC,UAAD;AACE,MAAA,MAAM,EAAE,KAAKQ,KAAL,CAAWH,YADrB;AAEE,MAAA,OAAO,EAAE,KAAK0C,iBAFhB;AAGE,MAAA,OAAO,EAAE,KAAKvC,KAAL,CAAWF,iBAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKE,KAAL,CAAWJ,aAAX,CAAyB4C,IAA9B,CADA,CAJF,CAHF,CAXJ,EAwBK,KAAKxC,KAAL,CAAWM,YAAX,IAA2B,KAAKE,aAAL,EAxBhC,EAyBI,oBAAC,MAAD;AACM,MAAA,IAAI,EAAE;AACJE,QAAAA,GAAG,EAAE5D,eADD;AAEJ6D,QAAAA,MAAM,EAAE,IAAI,KAAKpB,KAAL,CAAWqB,MAAX,CAAkBC,IAAlB,CAAuBC,KAA3B,CAAiC,EAAjC,EAAoC,EAApC,CAFJ;AAGJC,QAAAA,UAAU,EAAE,IAAI,KAAKxB,KAAL,CAAWqB,MAAX,CAAkBC,IAAlB,CAAuBG,IAA3B,CAAgC,EAAhC,EAAmC,EAAnC;AAHR,OADZ;AAMM,MAAA,OAAO,EAAE,KAAKxB,aANpB;AAOM,MAAA,IAAI,EAAE,eAPZ;AAQM,MAAA,OAAO,EAAI,UARjB;AASM,MAAA,KAAK,EAAI,YATf;AAUM,MAAA,KAAK,EAAI,UAVf;AAWM,MAAA,SAAS,EAAI,eAXnB;AAYM,MAAA,SAAS,EAAI,WAZnB;AAaM,MAAA,QAAQ,EAAE;AAACpB,QAAAA,GAAG,EAAE,SAAN;AAAiBoD,QAAAA,GAAG,EAAE,CAAC;AAAvB,OAbhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBJ,EAyCI,oBAAC,UAAD;AACI,MAAA,MAAM,EAAE,KAAKxB,KAAL,CAAWH,YADvB;AAEI,MAAA,OAAO,EAAE,KAAK0C,iBAFlB;AAGI,MAAA,OAAO,EAAE,KAAKvC,KAAL,CAAWF,iBAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKE,KAAL,CAAWJ,aAAX,CAAyB4C,IAA9B,CADA,EAEA;AAAG,MAAA,IAAI,EAAE,qDAAqD,KAAKxC,KAAL,CAAWJ,aAAX,CAAyB6C,IAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,cAAc,KAAKzC,KAAL,CAAWJ,aAAX,CAAyBrB,OAA7C,CADF,CAFA,EAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,gBAAgB,KAAKyB,KAAL,CAAWJ,aAAX,CAAyB8C,KAA9C,CANA,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,iBAAiB,KAAK1C,KAAL,CAAWJ,aAAX,CAAyB+C,KAA/C,CAPA,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,qBAAqB,KAAK3C,KAAL,CAAWJ,aAAX,CAAyBgD,SAAnD,CARA,EASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,gBAAgB,KAAK5C,KAAL,CAAWJ,aAAX,CAAyBiD,SAA9C,CATA,CAJJ,CAzCJ,CADE,EA4DF,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAE5F,QAAAA,KAAK,EAAE;AAAT,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACS,KAAK+C,KAAL,CAAWrB,UADpB,CAFF,CADA,CA5DE,CADF;AAuEH;;AA/JoC;AAkKzC,eAAejC,gBAAgB,CAAC;AAC9BoG,EAAAA,MAAM,EAAG;AADqB,CAAD,CAAhB,CAEZzD,SAFY,CAAf","sourcesContent":["import {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ResturantMarker from '../images/resturantMarker.png';\nimport {Card} from 'react-bootstrap';\n\nconst style = {\n    width: \"100%\",\n    height: \"90vh\",\n    position: \"relative\",\n  };\n\n  // Actual Magic: https://stackoverflow.com/a/41337005\n// Distance calculates the distance between two lat/lon pairs\nfunction distance(lat1, lon1, lat2, lon2) {\n  var p = 0.017453292519943295;\n  var a =\n    0.5 -\n    Math.cos((lat2 - lat1) * p) / 2 +\n    (Math.cos(lat1 * p) *\n      Math.cos(lat2 * p) *\n      (1 - Math.cos((lon2 - lon1) * p))) /\n      2;\n  return 12742 * Math.asin(Math.sqrt(a));\n}\n\n// Takes an array of objects with lat and lon properties as well as a single object with lat and lon\n// properties and finds the closest point (by shortest distance).\nfunction closest(data, v) {\n  // console.log(data.map(p => distance(v['lat'],v['lon'],p['lat'],p['lon'])))\n  // console.log(Math.min(...data.map(p => distance(v['lat'],v['lon'],p['lat'],p['lon']))))\n  var distances = data.map(function(p) {\n    return {\n      lat: p[\"lat\"],\n      lon: p[\"lon\"],\n      organization: p[\"organization\"],\n      address: p[\"address\"],\n      distance: distance(v[\"lat\"], v[\"lon\"], p[\"lat\"], p[\"lon\"])\n    };\n  });\n  var minDistance = Math.min(...distances.map(d => d.distance));\n\n  var closestTap = {\n    organization: \"\",\n    address: \"\",\n    lat: \"\",\n    lon: \"\"\n  };\n\n  for (var i = 0; i < distances.length; i++) {\n    if (distances[i].distance === minDistance) {\n      closestTap.lat = distances[i].lat;\n      closestTap.lon = distances[i].lon;\n      closestTap.organization = distances[i].organization;\n      closestTap.address = distances[i].address;\n    }\n  }\n\n  return closestTap;\n}\n\n  function getCoordinates() {\n    return new Promise(function(resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject);\n    });\n  }\n\nexport class GoogleMap extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n          showingInfoWindow: false,\n          activeMarker: {},\n          selectedPlace: {},\n          currlat: 39.708262399999995, // 39.9528,\n          currlon: -75.11408639999999, //-75.1635,\n          taps: [],\n          tapsLoaded: false,\n          allLocations: null,\n          closestPoint: null,\n        };\n      }\n\n      onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  onMapClicked = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  renderMarkers() {\n    return this.state.allLocations.map(item => {\n      return (\n        <Marker\n              icon={{\n                url: ResturantMarker,\n                anchor: new this.props.google.maps.Point(32,32),\n                scaledSize: new this.props.google.maps.Size(64,64)\n              }}\n              onClick={this.onMarkerClick}\n              name={item.name_of_restaurant}\n              address = {item.address}\n              sTime = {item.food_available_start_time}\n              eTime = {item.food_available_end_time}\n              foodAvail = {item.food_available}\n              allergies = {item.potential_allergies}\n              position={{lat: item.location.coordinates[0], lng: item.location.coordinates[1]}}\n              qPos = {item.location.coordinates[0] + \",\" + item.location.coordinates[1]}\n              />\n      )\n    })\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/donors')\n      .then(res => {\n        this.setState({ allLocations: res.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n\n      getCoordinates().then(position => {\n        if (isNaN(position.coords.latitude) || isNaN(position.coords.longitude)) {\n          this.setState({ currlat: parseFloat(\"39.952744\") });\n          this.setState({ currlon: parseFloat(\"-75.163500\") });\n        } else {\n          this.setState({ currlat: position.coords.latitude });\n          this.setState({ currlon: position.coords.longitude });\n        }\n      });\n      this.setState({closestTap: closest(this.state.allLocations, getCoordinates())})\n  }\n\n    render() {\n        console.log(this.state.allLocations);\n        return (\n          <>\n        <Map google={this.props.google}\n            className={\"map\"}\n            id=\"map\"\n            style={style}\n            zoom={14}\n            initialCenter={{\n            lat: this.state.currlat,\n            lng: this.state.currlon\n            }}\n            center={{ lat: this.state.currlat, lng: this.state.currlon }}\n        >\n            <Marker\n            onClick={this.onMarkerClick}\n            name={'Current location'} >\n              <InfoWindow\n                marker={this.state.activeMarker}\n                onClose={this.onInfoWindowClose}\n                visible={this.state.showingInfoWindow}>\n                <div>\n                <h1>{this.state.selectedPlace.name}</h1>\n                </div>\n            </InfoWindow>\n            </Marker>\n            \n            {this.state.allLocations && this.renderMarkers()}\n            <Marker\n                  icon={{\n                    url: ResturantMarker,\n                    anchor: new this.props.google.maps.Point(32,32),\n                    scaledSize: new this.props.google.maps.Size(64,64)\n                  }}\n                  onClick={this.onMarkerClick}\n                  name={'Holder Marker'}\n                  address = {\"Location\"}\n                  sTime = {\"Start Time\"}\n                  eTime = {\"End Time\"}\n                  foodAvail = {\"Food Avalible\"}\n                  allergies = {\"Allergies\"}\n                  position={{lat: 39.709262, lng: -75.1240}}/>\n\n\n            <InfoWindow\n                marker={this.state.activeMarker}\n                onClose={this.onInfoWindowClose}\n                visible={this.state.showingInfoWindow}>\n                <div>\n                <h3>{this.state.selectedPlace.name}</h3>\n                <a href={\"https://www.google.com/maps/search/?api=1&query=\" + this.state.selectedPlace.qPos}>\n                  <h5 >{\"Address: \" + this.state.selectedPlace.address}</h5>\n                </a>\n                \n                <h5>{\"Open Time: \" + this.state.selectedPlace.sTime}</h5>\n                <h5>{\"Close Time: \" + this.state.selectedPlace.eTime}</h5>\n                <h5>{\"Food Available: \" + this.state.selectedPlace.foodAvail}</h5>\n                <h5>{\"Allergies: \" + this.state.selectedPlace.allergies}</h5>\n                </div>\n            </InfoWindow>\n        </Map>\n        \n        <Card style={{ width: '18rem' }}>\n        <Card.Body>\n          <Card.Title>Closest Resturant</Card.Title>\n          <Card.Text>\n                  {this.state.closestTap}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n      </>\n        );\n    }\n    }\n\nexport default GoogleApiWrapper({\n  apiKey: (\"AIzaSyBIQpZBgN7WPGuBCRsCXQBfZJvetJxurFg\")\n})(GoogleMap)\n"]},"metadata":{},"sourceType":"module"}